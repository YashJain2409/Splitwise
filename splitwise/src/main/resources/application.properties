spring.application.name=splitwise
spring.datasource.url=jdbc:mysql://localhost:3306/splitwisedb
spring.jpa.hibernate.ddl-auto=update
spring.datasource.username=root
spring.datasource.password=root@123
server.port=8081




spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=splitwise-groupgit pu;
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# --- OAuth2 client registration for Google ---
spring.security.oauth2.client.registration.google.client-id=${Client_ID}
spring.security.oauth2.client.registration.google.client-secret=${Client_Secrete}
spring.security.oauth2.client.registration.google.scope=openid,email
#
## --- Optional: provider config (usually not needed as Spring knows Google) ---
## These are defaults, but you can override them if necessary
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.provider.google.user-name-attribute=sub
#
## --- Optional: redirect URI (Spring Boot auto-configures this) ---
## This is where Google redirects after login
## Default: {baseUrl}/login/oauth2/code/{registrationId}
## e.g. http://localhost:8080/login/oauth2/code/google
